module load spark
pyspark


rdd = spark.sparkContext.textFile("pulsar.dat")


# Parse and transform the data
parsed_rdd = rdd.map(lambda line: [float(x) for x in line.split()])


# Tried different error levels for rounding and found this error came back with output that was very similar for the top two most blips 
asc_dec_error = 1  
freq_error = 1  
time_error = 0.1 


# Function to round to nearest multiple of error
def round_to_error(value, error):
    return round(value / error) * error


# Grouped signals by location and frequency (considering error margins for rounding)
grouped_rdd = parsed_rdd.map(lambda x: (
    (round_to_error(x[0], asc_dec_error),
     round_to_error(x[1], asc_dec_error),
     round_to_error(x[3], freq_error)),
    x[2]
))


# Count blips for each group
blip_counts = grouped_rdd.groupByKey().mapValues(len)


# Find the source with the most blips
most_blips = blip_counts.reduce(lambda a, b: a if a[1] > b[1] else b)


# Calculate periods for the source with most blips
periods = grouped_rdd.lookup(most_blips[0])
periods.sort()
time_diffs = [periods[i+1] - periods[i] for i in range(len(periods)-1)]
avg_period = sum(time_diffs) / len(time_diffs)


# Print the result
print("Source with most blips:")
print(f"Ascension: {most_blips[0][0]:.1f} ± {asc_dec_error/2:.1f} degrees")
print(f"Declination: {most_blips[0][1]:.1f} ± {asc_dec_error/2:.1f} degrees")
print(f"Frequency: {most_blips[0][2]:.1f} ± {freq_error/2:.1f} MHz")
print(f"Total number of blips: {most_blips[1]}")
print(f"Average period between blips: {avg_period:.4f} ± {time_error/2:.4f} seconds")






top_5_blips = blip_counts.takeOrdered(5, key=lambda x: -x[1])


# Print the result
print("Top 5 sources with most blips:")
for source in top_5_blips:
    print(f"Ascension: {source[0][0]:.1f} ± {asc_dec_error/2:.1f} degrees")
    print(f"Declination: {source[0][1]:.1f} ± {asc_dec_error/2:.1f} degrees")
    print(f"Frequency: {source[0][2]:.1f} ± {freq_error/2:.1f} MHz")
    print(f"Number of blips: {source[1]}")
    print("-" * 40)




Source with most blips:                                                         
Ascension: 86.0 ± 0.5 degrees
Declination: 68.0 ± 0.5 degrees
Frequency: 4448.0 ± 0.5 MHz
Total number of blips: 18
Average period between blips: 1.1000 ± 0.0500 seconds
Top 5 sources with most blips:
Ascension: 87.0 ± 0.5 degrees
Declination: 68.0 ± 0.5 degrees
Frequency: 4448.0 ± 0.5 MHz
Number of blips: 18
----------------------------------------
Ascension: 86.0 ± 0.5 degrees
Declination: 68.0 ± 0.5 degrees
Frequency: 4448.0 ± 0.5 MHz
Number of blips: 18
----------------------------------------
Ascension: 105.0 ± 0.5 degrees
Declination: 111.0 ± 0.5 degrees
Frequency: 3031.0 ± 0.5 MHz
Number of blips: 16
----------------------------------------
Ascension: 57.0 ± 0.5 degrees
Declination: 115.0 ± 0.5 degrees
Frequency: 3509.0 ± 0.5 MHz
Number of blips: 15
----------------------------------------
Ascension: 59.0 ± 0.5 degrees
Declination: 58.0 ± 0.5 degrees
Frequency: 3782.0 ± 0.5 MHz
Number of blips: 14
----------------------------------------




#To see if it is the same signal making the blips, I wanted to filter for just the data in between 85.5-87.5 ascension, 67.5-68.5, and 4447.5-4448.5 frequency
 
ascparsed_rdd = parsed_rdd.filter(lambda x : (x[0] <= 87.5) and (x[0] >= 85.5))


descparsed_rdd = ascparsed_rdd.filter(lambda x : (x[1] <= 68.5) and (x[1] >= 67.5))


freqparsed_rdd = descparsed_rdd.filter(lambda x : (x[3] <= 4448.5) and (x[3] >= 4447.5))


freqparsed_rdd.count()
36
#Comes out to only 36 signals in this filter, use take to look at all of them


freqparsed_rdd.take(36)


#Want the signals to be sorted by time occurring to see if they are all approximately regularly spaced


sorted_rdd = freqparsed_rdd.sortBy(lambda x: x[2])
sorted_rdd.take(36)


[[86.4040855944793, 68.14648654201395, 2799.9995391021644, 4448.085262566298],
 [86.49261710268375, 68.14113014735139, 2801.1015620642256, 4447.961492383527],
 [86.40673896686938, 68.02947826488557, 2802.1992164117432, 4448.031614173278],
 [86.42212833272578, 68.14189782678355, 2803.300508136213, 4448.273371056758],
 [86.48625614082346, 67.9405472291502, 2804.4002043765263, 4447.987696440969],
 [86.44842523515969, 68.23062263463738, 2805.4997770619098, 4447.854871905704],
 [86.43105871355554, 68.0708525587867, 2806.5988255784805, 4447.9578914836875],
 [86.43747227271791,
  68.09765982878419,
  2807.6995732951605,
  4448.0571469910055],
 [86.38362304625876, 68.01997472434199, 2808.799192556669, 4448.025082658186],
 [86.30955530564951, 68.02937830158753, 2809.9014342844685, 4447.919188770762],
 [86.39676569474621, 68.09456432522093, 2810.999136556827, 4447.988164186146],
 [86.44511922222436, 68.17241778870007, 2812.1001139407, 4448.022537348676],
 [86.33441535304547, 68.1402649691867, 2813.199764930366, 4448.171431132215],
 [86.40985876325098, 68.1164685153036, 2814.3006596393866, 4448.048872082349],
 [86.44254940785079, 68.13505962894004, 2815.399459366674, 4447.9904613029785],
 [86.39771032181723, 68.2304592154988, 2816.499450662511, 4448.165477882853],
 [86.43805032473328, 68.07390095293881, 2817.600667619794, 4448.077217452487],
 [86.4131506473072, 67.96237820872071, 2818.7000708226615, 4448.139393897067],
 [86.54874181508954, 68.19955726350973, 2819.8014903605313, 4448.091085029914],
 [86.69748274569079, 67.94865226567104, 2820.8997594082334, 4447.797546880266],
 [86.58205402252342, 68.10941780312695, 2822.0016885808036, 4448.0133756825],
 [86.59736462716936, 68.22783379329351, 2823.098658583156, 4447.923220474929],
 [86.68243947871497, 68.16277756453248, 2824.1994913737376, 4448.068621930301],
 [86.51192560100611, 68.27301314728275, 2825.2999328149576, 4448.061986639923],
 [86.55856144272148, 68.11693277978493, 2826.4001997684386, 4447.957199230594],
 [86.78866763799832, 68.14375495479517, 2827.501043401596, 4448.03798189493],
 [86.50914135563498, 68.13376234501037, 2828.6005715448173, 4448.070686728522],
 [86.57473484282973, 68.04897457292758, 2829.7011234664615, 4448.079518134616],
 [86.50205700432295,
  68.44777612354687,
  2830.8008827349418,
  4448.1352994429235],
 [86.51528274954762, 67.9985303172579, 2831.901136426528, 4448.041169195086],
 [86.50525550316645, 68.20269443498874, 2833.001017850788, 4448.074010158073],
 [86.50186401827423, 68.30979806836811, 2834.1005728218825, 4447.947408753749],
 [86.5751132930158, 68.11513748654735, 2835.200032651227, 4448.118226612493],
 [86.52345673874478, 68.30052321060647, 2836.3002041294308, 4448.075219256292],
 [86.61611524640281, 68.04359728657988, 2837.4010138701383, 4448.043986191521],
 [86.61837371457104, 68.01507379604395, 2838.500419586209, 4447.890163043998]]


#By viewing this data I concluded that all points were regularly spaced in a time of 1.1 seconds with an error term of .01 standard deviation. I also concluded that it seemed that 86.5, 68.15, and 4448 all made sense as the other points for the signal as almost all points in those respective columns seemed to fall within three standard deviations of them. So it seems to make sense to classify both of my two top groups from my initial output into one signal at 86.5, 68.15 degrees with 1.1 seconds in between them at a frequency of 4448 MHZ.